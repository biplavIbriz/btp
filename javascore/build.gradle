import java.nio.file.Files

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'foundation.icon:gradle-javaee-plugin:0.7.8'
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'foundation.icon.javaee'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // need to add this option to retrieve formal parameter names
    compileJava {
        options.compilerArgs += ['-parameters']
    }

    ext {
        javaeeVersion = getProperty("javaee.version")
        scorexVersion = getProperty("scorex.version")
        javaeeUnittestVersion = getProperty("javaee-unittest.version")
        scoreClientVersion = getProperty("score-client.version")
        iconsdkVersion = getProperty("iconsdk.version")
        jacksonVersion = getProperty("jackson.version")
        debugJar = Boolean.parseBoolean(getProperty("debugJar").toString())
        integrationTest = Boolean.parseBoolean(getProperty("integrationTest").toString())
    }

    def loadProperties = {
        def prefix = 'score-test.'
        def props = project.getProperties()
        def scoreTest = new HashMap<String, Object>()
        def keySet = ['keyStore','keyPassword','keySecret']
        props.each {
            if (it.key.startsWith(prefix)) {
                def splited = it.key.split("\\.")
                if (splited.length == 3) {
                    def user = splited[1]
                    def key = splited[2]
                    if (keySet.contains(key)) {
                        def obj = scoreTest.getOrDefault(user, new HashMap<String, String>())
                        obj.put(key, it.value.toString())
                        scoreTest.put(user, obj)
                    }
                }
            }
        }
        scoreTest.each {
            def resolvedKeyPassword = it.value.get('keyPassword')
            if (resolvedKeyPassword == null) {
                if (it.value.containsKey('keySecret')) {
                    resolvedKeyPassword = Files.readString(
                            java.nio.file.Path.of(it.value.get('keySecret').toString()))
                }
                it.value.put('resolvedKeyPassword', resolvedKeyPassword)
            }
        }

        scoreTest.put('url', props.getOrDefault(prefix + 'url', 'http://localhost:9082/api/v3'))
        scoreTest.put('nid', props.getOrDefault(prefix + 'nid', 3))
        scoreTest.put('parseNid', { Object v ->
            if (v instanceof String) {
                return v.startsWith("0x") ?
                        Integer.parseInt(v.substring(2), 16) :
                        Integer.parseInt(v)
            } else {
                return v as int
            }
        })

        if (!scoreTest.containsKey("default")) {
            scoreTest.put("default", Map.of("keyStore","","keySecret","","resolvedKeyPassword",""))
        }
        if (!scoreTest.containsKey("tester")) {
            scoreTest.put("tester", Map.of("keyStore","","keySecret","","resolvedKeyPassword",""))
        }

        ext['scoreTest'] = scoreTest
    }
    loadProperties()
}